Day1 session:
=============
September-04-2021
-----------------
Listen, Write, Practice, Teach


IDE : Integrated Development Environment

1. Created a project (we have not pom.xml)
2. Create a package week1.day1
3. Create a class MyFirstJavaProgram


MyFirstJavaProgram:

Namimg Conventions:
1. Start with the capital letter
2. Each word should also start with the upper case
   (Pascal)
3. No special characters
4. No spaces

Class name : MyFirstJavProgram
File name : MyFirstJavProgram.java ( package Explorer)

Java reserved Keywords: 
   Bold purple
   LowerCase letters


Synatax:
public class MyFirstJavaProgram{

}

public static void main(String[] args) - see it later


Basic Data Types and Variables:
------------------------------
Naming Convention:
Camel case

First letter - lower case
Each word should also start with the upper case
                                              data type
Sheriba - name            - String               String
2       - number of kids  - integer              int
W / H   - work/Home maker - character            char
50.20   - weight          - fractional number    float/double
yes/no                    - boolean(true/false)  boolean


2 data types:
-------------
Primitive data type:
byte
short
int
float
double
char
boolean

Non-Primitive data type:
String
Arrays


Data type:
Variable:



Mobile Phone:

Properties/attributes/Variable:
synatx:

byte ramSize=8 ;
dataType variable = value;

Look and feel:

byte ramSize     - 8 

brandName   - SamsungNote20
colour      - blue
PixelSize   - 14
Screensize  - 5.5
weight         - 194
chargerPattern - C
isTouchscreen  - true  
OSSupports     - Android
cameraCount    - 4
costOfMobile   - 16999
mobileNumber   - 9945673922
IMEI           - 21093810928301283

CONTROL STATEMENTS:
===================

Selection/Conditional Statements:

if (condition) {
    // block of code if condition is true
} else {
   // block of code if condition is false
}

Program :
// if the number is odd or even

1. Get a number
2. Divide it by 2 
3. Check the remainder;
4. If(remainder is 0)
        number is even

======================================
classroom 3:
// Check the divisibilty by 3 and 5
number = 15;


int num = 15;

if(num%3 == 0 && num%5 == 0 )
divisble both by 3 and 5 " TRIZZ-FIZZ"

else if(num%3 == 0)
divisible by 3 - print "TRIZZ"

else if(num%5 == 0)
divisble by 5 - print as "FIZZ"


+ - *
a*b
a/b
a+b 
a-b


Iterative Statements/looping statements :
========================================

For loop:
--------

// print all the even numbers between 1 and 50


1. get the number
2. check if the number is even
3.  

for(i=1;i<=50;i++)
{
   if(i is even){   
      print the number is even
    }
}

Problem statement: Convert a negative number to positive number
---------------------------------------------------------------
Pseudocode:
-----------
1. Initialize an integer with a negative number
   like, int number = -40;
2. Check if the number is a negative number 
   Hint : any number that is lesser than zero is a negative number
3. If so, convert the number to a positive numer

Expected output : 40


Problem statement: Check if the number is positive or negative
---------------------------------------------------------------
Pseudocode:
----------
 1. Initialize a number, say, int number= 35;
 2. If a number is positive, print "The number is positive"
    If a number is negative, print "The number is negative"
    If it nether negative nor positive, print as "The number is neither positive nor negative"
    
 JUMPING STATEMENTS:
#1 : break
The break keyword is used to break out a for loop, a while loop or a switch block.
pgm 1 : 
print all the numbers as in the for loop. ( 1 to 10)
But quit the loop when the value is 5
		for (int i = 0; i < 7; i++) {
			if(i==5) {
			   break;
			}
		//	System.out.println(i);
		}

#2 : continue
The continue keyword is used to end the current iteration in a for loop (or a while loop), 
and continues to the next iteration
pgm 2: Print only odd numbers // Skip all the even numbers

		// print all odd numbers alone from 1 to 15
		// skip all the even  numbers
		
		for (int i = 0; i <= 15; i++) {
			if(i%2 == 0) {
				continue;
			}
			System.out.println(i);
		}

#3 : return
Takes the control out of the method.

		for (int i = 0; i < 10; i++) {
			System.out.println(i);
			
			if(!value) {
				return;
			}
		}

******************************************************
CLASSES AND OBJECTS:
-------------------
Class : Blueprint for the object. 
        IT is from this the objects are created/replicated

Object: An entity that has both state and behavior.
        It is an instance of the class

1)variables / properties:
  -----------------------
2)methods/actions:
  ----------------
  Access specifiers:
Who can access this ? or The extent upto which it can be accessed
To set access levels for classes, variables, methods, and constructors

ClassRoom:
==========
- Create package name as week1.day2
- Create a  new class as "MyMobile" under week1.day2
- create variables for the class
- Create 2 public methods (makeCall() , sendMsg()) with simple print statement
- Create a private method payBills() with simple print statement

- Create main method
- Create object for Mobile class and call the methods and variables using the object
- Execute the class and get the result in console

- Create a new class as MyKid in week1.day2 package
- Create an object for the previous class "MyMobile"
- Try to access all the 3 methods of class "MyMobile"
- Observe the access level of all the methods.( See if all the methods are called)

Methods with return values and arguments:
-----------------------------------------


ARRAYS:
 - Arrays are used to store multiple values in a single variable
 - Collection of similar type of elements which has contiguous memory location- 
 - We can store only a fixed number of elements in a Java array.
 - It doesn't grow its size at runtime.

# Syntax:
  dataType[] <variableName> = value

# How do I Access the each Element of an Array?
  -- By referring the index number

  Array indexes start with 0: [0] --> refers the first element

# To find the number of elements in an array
        Length of the array: array.length;
           length is a property
# Finding the first and the last elements: 

# How to access multiple elements at a time from array?
  - for
  - for each
 
# sorting the array:

# Exception :


Classroom:
Find the second largest number:
Find the second smallest number:

******************************************************************
week2 day 1 : 11-09-2020
Agenda:
1. Strings
2. Selenium webDriver Basics

STRINGS:
=======
A String in Java is actually an object
It contain methods that can perform certain operations on strings


How to create object for a string?


1. Using literals :
2. Using new keyword:

1. String Length                                     : str.length()
2. Find a character in a String                      : charAt()
3. Get the position of a character in the string     : indexOf()
4. Get the last position of a character in the string: lastIndexOf()
5. Convert a string to a character array             : toCharArray()
6. Convert a character array to string               : String.valueOf(chArr)

7. Change a string to UpperCase : str.toUpperCase()
8. Change a string to lowerCase : str.toUpperCase()

9. Change a character to UpperCase : Character.toUpperCase(chArr[i])
10.Change a character to lowerCase : Character.toLowerCase(chArr[i])

11. Compare two strngs             : str.equals(String) 	
12. str.contains()

Demo:
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/classroom/string/CharOccurance.java
  - use charAt() and toCharArray()


String str = "welcome to chennai";
Problem statement:
Check number of occurrences of a char (eg 'e') in a String

1. declare the string
2. conevrt to char array
3. for loop -- char array
      if(chek if the incoming charcater is e) - count


ClassRoom:
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/assignments/mandatory/ChangeOddIndexToUpperCase.java
   - toCharArray()
   - Character.toUpperCase()

for(){
    if(i%2 !=0){ // odd
      Character.toUppercase()
     syso()
       }
   else
      just print the character

}

*********************************
SELENIUM Basics:
---------------
1. Selenium Introduction:
---------------------------
Web Automation tool : Only web applications can be automated
Open source : 
Multiple Browsers: 
   IE
   Firefox
   Chrome
   Edge
   Safari
   Opera
Multiple Languages:
   java
   C#
   Python
   Ruby
   Perl

2. Selenium Internal architecture:
4 components:

Selenium RC (RemoteControl)
Selenium IDE
Selenium WebDriver:
Selenium grid

3. How to set up your work environment?
***************************************
3. How to set up your work environment?
	Open a Maven Project
	Update with the dependencies required in pom.xml
          (Project Object Model or POM is the fundamental unit of work in Maven)
	What is POM.xml?
		The POM is an XML document contains information about the project and various configuration detail 
	What are dependencies?
		Dependencies are external JAR files (Java libraries) that the project uses
        Maven dependendencies in your local repository --> .m2
	Force update in case pom.xml throws an error.

Dependences required:
1. selenium-java ( client - language)

2. WebDriverManager dependency:
 Automatically manages the drivers
 1. Download the driver in your local machine
 2. Download the driver that matches the browser version
3. commons io

****************************************

READY TO CODE!!!!
  *****Launch the browser*******

1. WebDriverManager 
2. Instantiate the driver
3. driver.get()
    Exception in thread "main" org.openqa.selenium.InvalidArgumentException: invalid argument
4. driver.manage.windows.maximize();
4. driver.getTitle()
5. driver.close()
      socketException

********************************************

http://leaftaps.com/opentaps/control/main
username : demosalesmanager
password : crmsfa

1. Enter the username
2. Enter the password
3. Click on the login button

web elements:

Element Location Strategies:
***************************

HTML:

root tag : <html> 
DOM: Document Object Model
HTML tags:
---------
<html>
<div>
<a>
<label>
<input>
<button>
<table>
<select>
<option>


Structure of HTML element:
=========================
1. Tag               : Tagname : purple text  / Mandatory   
2. Attributes        : Orange                 / Optional
3. Attribute values  : Blue text              / Optional
4. Text              : Black                  / Optional


How to locate the web element?

Locators:(selenium)
Where do we find the locators: HTML code ( devTools)

1. id    (optional) : Attribute
                      Use:     Unique 
                      Not use: Duplicates, auto generated numbers (eg) : ext-gen603 ext-gen612
2. name  (optional) : Attribute
                      Use:     Unique 
                      Not use: Duplicates
3. class (optional) : Attribute
                      Use:     Unique 
                      Not use: Duplicates, No space 
4. LinkText:          <a> - anchor tag + text
5. text() :        Optional
                    Black 
6. tagname:       Mandatory
7. Xpath: 
8. CSS locator  - NO

Steps to locate a web element:
=============================

1. Find the web element

driver.findElement(By by):
  Find the first web element using the given method
  Returns the first matching element on the current context

  If no matching elements are found, 
     throws NoSuchElementException 

  1. driver - represents the browser
  2. Web element - represents a DOM node

2. Perform the action on it:

   ********* Login Test case*******
url: http://leaftaps.com/opentaps
username: demosalesmanager
password: crmsfa


STEPS FOR LOGIN TEST CASE
*************************

// Step 1: Download and set the path 
// Step 2: Launch the chromebrowser
// Step 3: Load the URL
// Step 4: Maximise the window
// Step 5: Locate the username and type "demosalesmanager"
// Step 6: Locate the password and type "crmsfa"
// Step 7: Locate the Login button and click it
// Step 8: Click CRM/SFA link

**********************************************
******************************************************************
Agenda:
1. Strings
2. Selenium



STRINGS:
=======
A String in Java is actually an object
It contain methods that can perform certain operations on strings


How to create object for a string?


1. Using literals :
2. Using new keyword:

1. String Length                                     : str.length()
2. Find a character in a String                      : charAt()
3. Get the position of a character in the string     : indexOf()
4. Get the last position of a character in the string: lastIndexOf()
5. Convert a string to a character array             : toCharArray()
6. Convert a character array to string               : String.valueOf(chArr)

7. Change a string to UpperCase : str.toUpperCase()
8. Change a string to lowerCase : str.toUpperCase()

9. Change a character to UpperCase : Character.toUpperCase(chArr[i])
10.Change a character to lowerCase : Character.toLowerCase(chArr[i])

11. Compare two strngs             : str.equals(String) 	
12. str.contains()

Demo:
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/classroom/string/CharOccurance.java
  - use charAt() and toCharArray()


String str = "welcome to chennai";
Problem statement:
Check number of occurrences of a char (eg 'e') in a String

1. declare the string
2. conevrt to char array
3. for loop -- char array
      if(chek if the incoming charcater is e) - count

ClassRoom:
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/assignments/mandatory/ChangeOddIndexToUpperCase.java
   - toCharArray()
   - Character.toUpperCase()

for(){
    if(i%2 !=0){ // odd
      Character.toUppercase()
     syso()
       }
   else
      just print the character

}

changeme
cHaNgEmE

*******************

ASSIGNMENTS:
==========

Assignment #3: (Strings)
=============

https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/assignments/mandatory/Palindrome.java
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/assignments/mandatory/ChangeOddIndexToUpperCase.java
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/assignments/optional/Anagram.java
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/classroom/string/CharOccurance.java
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/classroom/string/FindTypes.java

https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/assignments/mandatory/ReverseEvenWords.java

*********************************
SELENIUM:
---------
1. Selenium Introduction:
---------------------------
Web Automation tool : Only web applications can be automated
Open source : 
Multiple Browsers: 
   IE
   Firefox
   Chrome
   Edge
   Safari
   Opera
Multiple Languages:
   java
   C#
   Python
   Ruby
   Perl

2. Selenium Internal architecture:
4 components:

Selenium RC (RemoteControl)
Selenium IDE
Selenium WebDriver:
Selenium grid

3. How to set up your work environment?
***************************************
3. How to set up your work environment?
	Open a Maven Project
	Update with the dependencies required in pom.xml
          (Project Object Model or POM is the fundamental unit of work in Maven)
	What is POM.xml?
		The POM is an XML document contains information about the project and various configuration detail 
	What are dependencies?
		Dependencies are external JAR files (Java libraries) that the project uses
        Maven dependendencies in your local repository --> .m2
	Force update in case pom.xml throws an error.

Dependences required:
1. selenium-java ( client - language)

2. WebDriverManager dependency:
 Automatically manages the drivers
 1. Download the driver in your local machine
 2. Download the driver that matches the browser version
3. commons io

****************************************

READY TO CODE!!!!
  *****Launch the browser*******

1. WebDriverManager 
2. Instantiate the driver
3. driver.get()
    Exception in thread "main" org.openqa.selenium.InvalidArgumentException: invalid argument
4. driver.manage.windows.maximize();
4. driver.getTitle()
5. driver.close()
      socketException

********************************************

http://leaftaps.com/opentaps/control/main
username : demosalesmanager
password : crmsfa

1. Enter the username
2. Enter the password
3. Click on the login button

web elements:

Element Location Strategies:
***************************

HTML:

root tag : <html> 
DOM: Document Object Model
HTML tags:
---------
<html>
<div>
<a>
<label>
<input>
<button>
<table>
<select>
<option>


Structure of HTML element:
=========================
1. Tag               : Tagname : purple text  / Mandatory   
2. Attributes        : Orange                 / Optional
3. Attribute values  : Blue text              / Optional
4. Text              : Black                  / Optional


How to locate the web element?

Locators:(selenium)
Where do we find the locators: HTML code ( devTools)

1. id    (optional) : Attribute
                      Use:     Unique 
                      Not use: Duplicates, auto generated numbers (eg) : ext-gen603 ext-gen612
2. name  (optional) : Attribute
                      Use:     Unique 
                      Not use: Duplicates
3. class (optional) : Attribute
                      Use:     Unique 
                      Not use: Duplicates, No space 
4. LinkText:          <a> - anchor tag + text
5. text() :        Optional
                    Black 
6. tagname:       Mandatory
7. Xpath: 
8. CSS locator  - NO

Steps to locate a web element:
=============================

1. Find the web element

driver.findElement(By by):
  Find the first web element using the given method
  Returns the first matching element on the current context

  If no matching elements are found, 
     throws NoSuchElementException 

  1. driver - represents the browser
  2. Web element - represents a DOM node

2. Perform the action on it:

   ********* Login Test case*******
url: http://leaftaps.com/opentaps
username: demosalesmanager
password: crmsfa


STEPS FOR LOGIN TEST CASE
*************************

// Step 1: Download and set the path 
// Step 2: Launch the chromebrowser
// Step 3: Load the URL
// Step 4: Maximise the window
// Step 5: Locate the username and type "demosalesmanager"
// Step 6: Locate the password and type "crmsfa"
// Step 7: Locate the Login button and click it
// Step 8: Click CRM/SFA link

**********************************************

Week2 Day2:
Sep 12 2021
***********
Agenda:
*******
1. Strings
2. get methods:
	get()
	getText()
	getAttribute()
	getTitle()
3. implicitly wait
4. DropDown
5. Xpath

*********************************
Strings:
*****************
Convert a string to words: split()
Get a part of the string: subString()
Replace a character:
7. replace
8. replace integers, non integers
str.replaceAll("[\\d]", ""); - non integers
str.replaceAll("[\\D]", ""); - integers
11. startsWith()
12. endsWith()

**********************************
Dropdown:
--------
<select>
   <options>


How to handle a drop down?
-------------------------

1. Locate the webElement:
2. Create an object for the Select class and pass the webelement as the parameter 

How to select a value in dropdown list?
-----------------------------------------
1. selectByVisibleText: selectByVisibleText(String arg0): void
2. selectByIndex: selectByIndex(int arg0) : void
3. selectByValue: selectByValue(String arg0) : void

*********************************************************

Xpath:
------
When locators are not available

A. Absolute Xpath:
===================
Xpath of username field in login page:
/html/body/div[2]/div/div/form/p/input

It contains the complete path from the Root Element to the desired element.

- not a preffered choice
- Unreliable because a small change in the UI, can change the absolute Xpath  


B. Relative Xpath: (13 types of Xpath)
==================
We start from a reference element and reach the particular element
Selenium by default chooses the first result out of multiple results
Xpath of username field in login page:
(eg)//input


1. Attribute Based XPath:
   ----------------------
Syntax:
//tagname[@attribute='attributeValue']

//input[@id='username']
//input[@class='inputLogin']
//input[@type='password']

2. Text Based Xpath:
   -----------------
Syntax:
//tagname[text()='text value in DOM']

//label[text()='Username']
//h2[text()='Leaftaps Login']

3. Partial Match Xpath:
=======================

a) Partial Text Based Xpath:
---------------------------
Syntax:
//tagname[contains(text(),'Partial text in my DOM')]
//h2[contains(text(),'Leaftaps')]

a) Partial attribute Based Xpath:
---------------------------------
//tagname[contains(@attribute,'Partial value of the attribute')]

//input[@type='password']
//input[contains(@type,'pass')]

4. Collections Based Xpath:
===========================

Syntax:
(Any valid relative Xpath)[index]
(Xpath)[index]

(//input[@class='inputLogin'])[2]


5. Advanced Xpath/ RelationShip based Xpath/ Axes based Xpath:
==============================================================

8 types and its syntax:
-----------------------

1 Parent To child                 : parent xpath/tagName of child
2 GrandParent to child Relation   : GrandParent xpath//tagName of grand child
3 Child to parent                 : child xpath/parent::parent tagName
4 Grand child to Grand parent     : GrandChild xpath/ancestor::tagName of grand parent
5 Elder Sibling toYounger Sibling : Elder sibling xpath/following-sibling::tagName of younger sibling
6 Younger Sibling to elder Sibling: Younger sibling xpath/preceding-sibling::tagName of Elder sibling
7 Elder cousin to Younger cousin  : Elder cousing xpath/following::tagName of younger Cousin
8 Younger cousin to Elder cousin  : Younger cousin xpath/preceding::tagName of Elder cousin

(13 types of Xpath)
****************************************************************

(Note: implicitly wait)
driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);



18.09.2021
week3 day1

Topic: INHERITANCE
OOPS: Object Oriented Programming

Object :  
State(variables/properties/attributes) and Behaviour( methods/Actions)

Inheritance in Java
-------------------
What is inheritance?
It allows us to inherit the properties of one class into another class

Why Inheritence?
Reusability

Keyword: extends

Child : has its own method
        Alos the inherited methods
Types:
Single level
Multilevel

The existing (old) class is known as base class or super class or parent class. 
The new class is known as a derived class or sub class or child class

Multiple Inheritence is not supported at Class level

Car: variables:
noofWheels
tankCapacity

actions/ methods

driveCar()
applyBrake()
startEngine()
applyGear()


Inheritance in Selenium:
-----------------------
F3 : Open the declaration
F4 : hierarchy (parent class)

ChromiumDriver extends RemoteWebDriver			
ChromeDriver extends ChromiumDriver			
EdgeDriver extends ChromiumDriver			
SafariDriver extends RemoteWebDriver			
FireFoxDriver extends RemoteWebDriver	

		
POLYMORPHISM:
-------------
What is polymorphism?

poly : many
morph: forms

Types:
1. Method Overriding/runTime polymorphism
2. Method Overloading/Compile time polymorphism

*Method Overriding*
-------------------
- among diff classes
- between a parent class and a child class

length(),isEmpty() - String class

*Method Overloading:*
--------------------
- Method signature differs

- method name is same:
    number of arguments differs
    Type of the argument differs
- same class

Selenium:

1. By.
2. sendKeys()
3. findElement()
4. ImplicitlyWait()

Java:

print()
println()
replace
subString(start Index)
subString(start Index, end index)


Classroom 3:
Create class Calculator with below methods

- 2 methods for add,      1 method with 2 int args , 1 method with 3 int args
- 2 methods for multiply, 1 method with 2 int args, 1method with 1 int and 1 double args
- 2 methods for subtract, 1 method with 2 int args , 1 method with 2 double args
- 2 methods to divide ,   1 method with 2 int args, 1 method with one double number and one int

Create object for the Calculator class and execute all the methods


Homework:
---------
- Try for private access secifier in inheritance
- Try for protected access secifier in inheritance
- Try to do (class level) Multiple inheritence at class level( Not supported by Java)
- Give an example of Method overriding in Selenium

**************************************************

Topic: ABSTRACTION
******************
 Abstraction is a process of hiding the implementation details 
 Showing only functionality to the user.


The quality of dealing with ideas rather than events.
The user will have the information on what the object does instead of how it does 

-- Interface ( 100% of abstraction)
-- Abstract Class (0-100 % of abstraction )

What is Interface?
- design/Plan ()

Abstract class : class without a body / no implementation
Concrete class : class with a body / implementation

1. Added Unimplemented methods inside the Interface

2. Type the Documentation (use /** - Enter)

3. Use the Keyword : implements 

4. All the unimplemnted methods of an Interface has to be 
   implemented in the implementation class 
   (ie. the class that implements that Interface)

5. The implementation class can have its own method in it too.


6. Object instantiation cannot be done for an Interface.


7. CLASS LEVEL MULTIPLE INHERITANCE IS NOT POSSIBLE
   INTERFACE LEVEL MULTIPLE INHERITANCE IS POSSIBLE
     ( do it with TWO INTERFACES)

8. Inheritence - extends
   A class can inherit and also implement, both at a time.

9. Variables in Interface
 The variable in an interface is public, static, and final by default.
 public : accesses by any class
 final  : value cannot be changed
 static : No need of object to call the variable

If any variable in an interface is defined without public, static, and final keywords then, the compiler automatically adds the same.

Note:
Interface extends Interface
Class extends Class
Class Implements Interface


Examples:
********
Java example for Interface:
---------------------------
interface List<E> extends Collection<E>

Selenium example:
-----------------
RemoteWebDriver implements IsRemoteWebDriver
IsRemoteWebDriver extends WebDriver

Classroom 1:
===========
1.Design an Interface TaxCalculation with unimplemented methods below:
  Include documentations for each method
        void calcDeductions(String name, double HRA, double LTA)
	void calcGrossIncome(String name, double netIncome, double deductions)
	public int taxSlab()
	public double CalcTaxandPublishValue()

2. Design a second Interface IncomeCalculation with unimplemented method below:
       public double calcNetIncome(String name, double income1, double income2)

3. Implementation class: 
       CalcIndividualsTax, CalcBusinessTax  
       Implement TaxCalculation and IncomeCalculation interfaces
       Add its own method in this class( which is not in the interface)

4. Create a new class Execution class: ( with main method)
       Try to implement all the above learnings ( from point 1 to point 9) 


Abstraction :
============
Abstract Class
Abstract classes may or may not contain abstract methods, 
i.e., methods without body ( public void get(); )

But, if a class has at least one abstract method, then the class must be declared abstract.

If a class is declared abstract, it cannot be instantiated.

To use an abstract class, you have to inherit it from another class, 
      provide implementations to the abstract methods in it.

If you inherit an abstract class, you have to provide implementations 
       to all the abstract methods in it.
******************************************************

Collections:
1. List
2. Set

COLLECTIONS:
We can overcome the disadvantages of array in Collections.

7,149 Items Found  Array1 
8000 Items Array1

LIST:

List:
-----
1. Interface
2. cannot instantiate
3. Implmentation class : ArrayList
4. Maintains the insertion order
5. Can accept duplicates
6. syntax:


List<String> listName = new ArrayList<String>();
List<Integer> listName = new ArrayList<Integer>();

< > : Generics
Wrapper Class:
-------------
int     Integer
short   Short
boolean Boolean
char    Character
double  Double
String  String
byte    Byte
long    Long
float   Float
Syntax:

Classroom:

1. Get a  String array
2. Convert to List
3. Sort and print it
4. reverse and print it

SET:
SET:
1. Interface
2. cannot instantiate
3. Implmentation class : 
     HashSet       : Random order of the data
     LinkedHashSet : maintains the insertion Order
     TreeSet       : ASCII order ( sorted)
4. Maintains the insertion order
5. Cannot accept duplicates
6. syntax:
 Set<WrapperClass> setname = new HashSet<wrapperClass>();

ClassRoom:
Print the unique characters for the string

Input = "ammu123"
Output : amu123

Classroom:
Erail application - to get the list of train numbers

Week4 Day1: 25-09-2021
AGENDA:

1. Alerts
2. Frames
3. WindowHandling
4. TakeScreenShot

ALERTS:
-------
  web based dialog
  pop up or dialog 
  warning msg/ prompt/ Information

1. When an alert is currently active, the main page cannot be interacted.
2. We cannot inspect an Alert
3. Not seen in the DOM/  no locators as a normal webElement 
4. Done through the JavaScript
5. Cannot have multiple alerts at a time
6. We canno ttake a screen shot of an alert.

Types:
1. Modal dialog /Alert

   Types:
      1. Simple Alert       - Ok button - dismiss()/accept()
      2. Confirmation Alert - OK button and Cancel button
      3. Prompt Alert       - OK button and Cancel button, textbox

HANDLING THE ALERT:

   Alert - Interface
        Implementation class : RemoteAlert

  void dismiss();  Cancel
  void accept();   Ok button
  String getText(); To get text from alert
  void sendKeys(String keysToSend); To type in the text

-- Automaticaly switches the control to the current active dialog

   driver.switchTo().alert();

Step 1: switch the control to the current active dialog (SWITCH)
Step 2: Use the interface methods to handle the alert   (HANDLE)


ALERT EXCEPTIONS:
----------------
1)
// Throws org.openqa.selenium.NoAlertPresentException
      * If the dialog cannot be found/ or if THERE is no current active alert
      * Occurs when trying to interact with the alert that is not active curently

2)
// org.openqa.selenium.UnhandledAlertException
       Occurs when Alert is still alive and	
       I try to access the main window
  
Classroom1 :
-----------
http://www.leafground.com/pages/Alert.html
 Try to handle frst three alerts in this page.
 For the Confirmation alert, verify of the OK/Cancel button is clicked

2. Non -Modal dialog/sweet alert:
      - Can be inspected
      - Can handle as a normal webElement

egs: IRCTC, tatcliq

      https://www.tatacliq.com/
      https://www.irctc.co.in/nget/train-search

***********************************

FRAMES:
-------

1. DOCUMENT INSIDE ANOTHER DOCUMENT (DOM inside a DOM)
2. <html> root tag for each frames

How does it appear in DOM?

1. <iframe> -- inline frame (floating frame)
2. <frame>  -- static frame/immovable

http://www.leafground.com/pages/frame.html

Main Document
<html>

     Frames:
      <html>

       Step 1: Switch into the frame
       Step 2: Locate the webelement

            BUTTON
   Come out of the frame

webElement in main page


Identify the frame :
  step1 : Switch :
          driver.switchTo().frame()
         (i) int - index
         (ii) String - id or name 
         (iii) WebElement - locator
          
 
Exception:
    
    NoSuchElementException
    NoFrameElementException

1. NoSuchElementException:
   - Wrong XPath/Locator
   - element is not loaded in DOM
   - when the element is inside a frame, and control is not inside the frame
 
Commands needed for frame:

driver.switchTo().frame(nestedFrame1);
driver.switchTo().defaultContent(); 
driver.switchTo().parentFrame();

RETURNING THE CONROL TO THE PREVIOUS LEVELS :
DefaultContent -- Frame2 control to main DOM  (Top of the DOM)
parentFrame    -- Frame2 to Frame1 ( One level higher - previous frame)

Frames:
ServiceNow:
Instance URL: https://dev113545.service-now.com/
Username: admin
Password: w6hnF2FRhwLC

****************************************************

WindowHandling:
--------------

Normal webElement:  8 locators
Frames           :  3 options
Windows          :  window handle

                    Window handle:(String):Unique
To switch the control to the desired window:
-------------------------------------------
driver.switchTo().window(windowHandle);

       getWindowHandle() - Current active (single) window
                         - return : String
       getWindowHandles() - Set of Strings


4 windows:
Set - get(2) 
1
2
3
4

List, Set - Collections:
   Set  - get a specific value based on index - NO
1. getWindowHandles()

     1. Set of strings
     2. Convert the Set to List 
     3. list.get(window) 

2. driver.switchTo().window(windowHandle);

Exceptions:
org.openqa.selenium.NoSuchWindowException

*************************************
ClassRoom:

Alerts and Window handling
---------------------------
1. Load https://www.irctc.co.in/
2. Click on OK button in the dialog  
3. Click on FLIGHTS link            
4. Go to the Flights tab
5. Print the customer care email id
6. Close the First tab(Train ticket booking) alone
*****************************



































KeyBorad short cuts:

Format the code:
cntrl  shft  f

ctrl+space

Execute: 

RightClick --> RUnAs --> java applcation
Cntrl f11



















ClassRoom:
---------
Check the divisibilty by 3 or 5
1. If the number is divisible by 3 , print TRIZZ
2. If the number is divisible by 5 , print FIZZ
3. If the number is divisible both by 3 and 5 , print TRIZZ-FIZZ

Switch Case:










